/*
 * This file is generated by jOOQ.
 */
package gov.epa.bencloud.server.database.jooq.tables;


import gov.epa.bencloud.server.database.jooq.Data;
import gov.epa.bencloud.server.database.jooq.Keys;
import gov.epa.bencloud.server.database.jooq.tables.records.PollutantMetricRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PollutantMetric extends TableImpl<PollutantMetricRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>data.pollutant_metric</code>
     */
    public static final PollutantMetric POLLUTANT_METRIC = new PollutantMetric();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PollutantMetricRecord> getRecordType() {
        return PollutantMetricRecord.class;
    }

    /**
     * The column <code>data.pollutant_metric.id</code>.
     */
    public final TableField<PollutantMetricRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>data.pollutant_metric.pollutant_id</code>.
     */
    public final TableField<PollutantMetricRecord, Integer> POLLUTANT_ID = createField(DSL.name("pollutant_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>data.pollutant_metric.name</code>.
     */
    public final TableField<PollutantMetricRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>data.pollutant_metric.hourly_metric_generation</code>.
     */
    public final TableField<PollutantMetricRecord, Short> HOURLY_METRIC_GENERATION = createField(DSL.name("hourly_metric_generation"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>data.pollutant_metric.window_size</code>.
     */
    public final TableField<PollutantMetricRecord, Short> WINDOW_SIZE = createField(DSL.name("window_size"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>data.pollutant_metric.window_statistic</code>.
     */
    public final TableField<PollutantMetricRecord, Short> WINDOW_STATISTIC = createField(DSL.name("window_statistic"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>data.pollutant_metric.start_hour</code>.
     */
    public final TableField<PollutantMetricRecord, Short> START_HOUR = createField(DSL.name("start_hour"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>data.pollutant_metric.end_hour</code>.
     */
    public final TableField<PollutantMetricRecord, Short> END_HOUR = createField(DSL.name("end_hour"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>data.pollutant_metric.daily_statistic</code>.
     */
    public final TableField<PollutantMetricRecord, Short> DAILY_STATISTIC = createField(DSL.name("daily_statistic"), SQLDataType.SMALLINT, this, "");

    private PollutantMetric(Name alias, Table<PollutantMetricRecord> aliased) {
        this(alias, aliased, null);
    }

    private PollutantMetric(Name alias, Table<PollutantMetricRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>data.pollutant_metric</code> table reference
     */
    public PollutantMetric(String alias) {
        this(DSL.name(alias), POLLUTANT_METRIC);
    }

    /**
     * Create an aliased <code>data.pollutant_metric</code> table reference
     */
    public PollutantMetric(Name alias) {
        this(alias, POLLUTANT_METRIC);
    }

    /**
     * Create a <code>data.pollutant_metric</code> table reference
     */
    public PollutantMetric() {
        this(DSL.name("pollutant_metric"), null);
    }

    public <O extends Record> PollutantMetric(Table<O> child, ForeignKey<O, PollutantMetricRecord> key) {
        super(child, key, POLLUTANT_METRIC);
    }

    @Override
    public Schema getSchema() {
        return Data.DATA;
    }

    @Override
    public Identity<PollutantMetricRecord, Integer> getIdentity() {
        return (Identity<PollutantMetricRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PollutantMetricRecord> getPrimaryKey() {
        return Keys.POLLUTANT_METRIC_PKEY;
    }

    @Override
    public List<UniqueKey<PollutantMetricRecord>> getKeys() {
        return Arrays.<UniqueKey<PollutantMetricRecord>>asList(Keys.POLLUTANT_METRIC_PKEY);
    }

    @Override
    public PollutantMetric as(String alias) {
        return new PollutantMetric(DSL.name(alias), this);
    }

    @Override
    public PollutantMetric as(Name alias) {
        return new PollutantMetric(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PollutantMetric rename(String name) {
        return new PollutantMetric(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PollutantMetric rename(Name name) {
        return new PollutantMetric(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, Integer, String, Short, Short, Short, Short, Short, Short> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
