/*
 * This file is generated by jOOQ.
 */
package gov.epa.bencloud.server.database.jooq.tables.records;


import gov.epa.bencloud.server.database.jooq.tables.Pollutant;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PollutantRecord extends UpdatableRecordImpl<PollutantRecord> implements Record3<Integer, String, Short> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>data.pollutant.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>data.pollutant.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>data.pollutant.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>data.pollutant.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>data.pollutant.observation_type</code>.
     */
    public void setObservationType(Short value) {
        set(2, value);
    }

    /**
     * Getter for <code>data.pollutant.observation_type</code>.
     */
    public Short getObservationType() {
        return (Short) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Short> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, String, Short> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Pollutant.POLLUTANT.ID;
    }

    @Override
    public Field<String> field2() {
        return Pollutant.POLLUTANT.NAME;
    }

    @Override
    public Field<Short> field3() {
        return Pollutant.POLLUTANT.OBSERVATION_TYPE;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public Short component3() {
        return getObservationType();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public Short value3() {
        return getObservationType();
    }

    @Override
    public PollutantRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public PollutantRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public PollutantRecord value3(Short value) {
        setObservationType(value);
        return this;
    }

    @Override
    public PollutantRecord values(Integer value1, String value2, Short value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PollutantRecord
     */
    public PollutantRecord() {
        super(Pollutant.POLLUTANT);
    }

    /**
     * Create a detached, initialised PollutantRecord
     */
    public PollutantRecord(Integer id, String name, Short observationType) {
        super(Pollutant.POLLUTANT);

        setId(id);
        setName(name);
        setObservationType(observationType);
    }
}
