/*
 * This file is generated by jOOQ.
 */
package gov.epa.bencloud.server.database.jooq.tables;


import gov.epa.bencloud.server.database.jooq.Data;
import gov.epa.bencloud.server.database.jooq.Keys;
import gov.epa.bencloud.server.database.jooq.tables.records.ValuationFunctionRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row20;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ValuationFunction extends TableImpl<ValuationFunctionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>data.valuation_function</code>
     */
    public static final ValuationFunction VALUATION_FUNCTION = new ValuationFunction();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ValuationFunctionRecord> getRecordType() {
        return ValuationFunctionRecord.class;
    }

    /**
     * The column <code>data.valuation_function.id</code>.
     */
    public final TableField<ValuationFunctionRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>data.valuation_function.valuation_dataset_id</code>.
     */
    public final TableField<ValuationFunctionRecord, Integer> VALUATION_DATASET_ID = createField(DSL.name("valuation_dataset_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>data.valuation_function.endpoint_group_id</code>.
     */
    public final TableField<ValuationFunctionRecord, Integer> ENDPOINT_GROUP_ID = createField(DSL.name("endpoint_group_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>data.valuation_function.endpoint_id</code>.
     */
    public final TableField<ValuationFunctionRecord, Integer> ENDPOINT_ID = createField(DSL.name("endpoint_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>data.valuation_function.qualifier</code>.
     */
    public final TableField<ValuationFunctionRecord, String> QUALIFIER = createField(DSL.name("qualifier"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>data.valuation_function.reference</code>.
     */
    public final TableField<ValuationFunctionRecord, String> REFERENCE = createField(DSL.name("reference"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>data.valuation_function.start_age</code>.
     */
    public final TableField<ValuationFunctionRecord, Integer> START_AGE = createField(DSL.name("start_age"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>data.valuation_function.end_age</code>.
     */
    public final TableField<ValuationFunctionRecord, Integer> END_AGE = createField(DSL.name("end_age"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>data.valuation_function.function_text</code>.
     */
    public final TableField<ValuationFunctionRecord, String> FUNCTION_TEXT = createField(DSL.name("function_text"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>data.valuation_function.val_a</code>.
     */
    public final TableField<ValuationFunctionRecord, BigDecimal> VAL_A = createField(DSL.name("val_a"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>data.valuation_function.name_a</code>.
     */
    public final TableField<ValuationFunctionRecord, String> NAME_A = createField(DSL.name("name_a"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>data.valuation_function.dist_a</code>.
     */
    public final TableField<ValuationFunctionRecord, String> DIST_A = createField(DSL.name("dist_a"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>data.valuation_function.p1a</code>.
     */
    public final TableField<ValuationFunctionRecord, BigDecimal> P1A = createField(DSL.name("p1a"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>data.valuation_function.p2a</code>.
     */
    public final TableField<ValuationFunctionRecord, BigDecimal> P2A = createField(DSL.name("p2a"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>data.valuation_function.val_b</code>.
     */
    public final TableField<ValuationFunctionRecord, BigDecimal> VAL_B = createField(DSL.name("val_b"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>data.valuation_function.name_b</code>.
     */
    public final TableField<ValuationFunctionRecord, String> NAME_B = createField(DSL.name("name_b"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>data.valuation_function.val_c</code>.
     */
    public final TableField<ValuationFunctionRecord, BigDecimal> VAL_C = createField(DSL.name("val_c"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>data.valuation_function.name_c</code>.
     */
    public final TableField<ValuationFunctionRecord, String> NAME_C = createField(DSL.name("name_c"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>data.valuation_function.val_d</code>.
     */
    public final TableField<ValuationFunctionRecord, BigDecimal> VAL_D = createField(DSL.name("val_d"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>data.valuation_function.name_d</code>.
     */
    public final TableField<ValuationFunctionRecord, String> NAME_D = createField(DSL.name("name_d"), SQLDataType.CLOB, this, "");

    private ValuationFunction(Name alias, Table<ValuationFunctionRecord> aliased) {
        this(alias, aliased, null);
    }

    private ValuationFunction(Name alias, Table<ValuationFunctionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>data.valuation_function</code> table reference
     */
    public ValuationFunction(String alias) {
        this(DSL.name(alias), VALUATION_FUNCTION);
    }

    /**
     * Create an aliased <code>data.valuation_function</code> table reference
     */
    public ValuationFunction(Name alias) {
        this(alias, VALUATION_FUNCTION);
    }

    /**
     * Create a <code>data.valuation_function</code> table reference
     */
    public ValuationFunction() {
        this(DSL.name("valuation_function"), null);
    }

    public <O extends Record> ValuationFunction(Table<O> child, ForeignKey<O, ValuationFunctionRecord> key) {
        super(child, key, VALUATION_FUNCTION);
    }

    @Override
    public Schema getSchema() {
        return Data.DATA;
    }

    @Override
    public Identity<ValuationFunctionRecord, Integer> getIdentity() {
        return (Identity<ValuationFunctionRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ValuationFunctionRecord> getPrimaryKey() {
        return Keys.VALUATION_FUNCTION_PKEY;
    }

    @Override
    public List<UniqueKey<ValuationFunctionRecord>> getKeys() {
        return Arrays.<UniqueKey<ValuationFunctionRecord>>asList(Keys.VALUATION_FUNCTION_PKEY);
    }

    @Override
    public ValuationFunction as(String alias) {
        return new ValuationFunction(DSL.name(alias), this);
    }

    @Override
    public ValuationFunction as(Name alias) {
        return new ValuationFunction(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ValuationFunction rename(String name) {
        return new ValuationFunction(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ValuationFunction rename(Name name) {
        return new ValuationFunction(name, null);
    }

    // -------------------------------------------------------------------------
    // Row20 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row20<Integer, Integer, Integer, Integer, String, String, Integer, Integer, String, BigDecimal, String, String, BigDecimal, BigDecimal, BigDecimal, String, BigDecimal, String, BigDecimal, String> fieldsRow() {
        return (Row20) super.fieldsRow();
    }
}
