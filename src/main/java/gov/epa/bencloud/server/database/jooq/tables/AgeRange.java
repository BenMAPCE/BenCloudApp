/*
 * This file is generated by jOOQ.
 */
package gov.epa.bencloud.server.database.jooq.tables;


import gov.epa.bencloud.server.database.jooq.Data;
import gov.epa.bencloud.server.database.jooq.Keys;
import gov.epa.bencloud.server.database.jooq.tables.records.AgeRangeRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AgeRange extends TableImpl<AgeRangeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>data.age_range</code>
     */
    public static final AgeRange AGE_RANGE = new AgeRange();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AgeRangeRecord> getRecordType() {
        return AgeRangeRecord.class;
    }

    /**
     * The column <code>data.age_range.id</code>.
     */
    public final TableField<AgeRangeRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>data.age_range.pop_config_id</code>.
     */
    public final TableField<AgeRangeRecord, Integer> POP_CONFIG_ID = createField(DSL.name("pop_config_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>data.age_range.name</code>.
     */
    public final TableField<AgeRangeRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>data.age_range.start_age</code>.
     */
    public final TableField<AgeRangeRecord, Short> START_AGE = createField(DSL.name("start_age"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>data.age_range.end_age</code>.
     */
    public final TableField<AgeRangeRecord, Short> END_AGE = createField(DSL.name("end_age"), SQLDataType.SMALLINT, this, "");

    private AgeRange(Name alias, Table<AgeRangeRecord> aliased) {
        this(alias, aliased, null);
    }

    private AgeRange(Name alias, Table<AgeRangeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>data.age_range</code> table reference
     */
    public AgeRange(String alias) {
        this(DSL.name(alias), AGE_RANGE);
    }

    /**
     * Create an aliased <code>data.age_range</code> table reference
     */
    public AgeRange(Name alias) {
        this(alias, AGE_RANGE);
    }

    /**
     * Create a <code>data.age_range</code> table reference
     */
    public AgeRange() {
        this(DSL.name("age_range"), null);
    }

    public <O extends Record> AgeRange(Table<O> child, ForeignKey<O, AgeRangeRecord> key) {
        super(child, key, AGE_RANGE);
    }

    @Override
    public Schema getSchema() {
        return Data.DATA;
    }

    @Override
    public Identity<AgeRangeRecord, Integer> getIdentity() {
        return (Identity<AgeRangeRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<AgeRangeRecord> getPrimaryKey() {
        return Keys.AGE_RANGE_PKEY;
    }

    @Override
    public List<UniqueKey<AgeRangeRecord>> getKeys() {
        return Arrays.<UniqueKey<AgeRangeRecord>>asList(Keys.AGE_RANGE_PKEY);
    }

    @Override
    public List<ForeignKey<AgeRangeRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AgeRangeRecord, ?>>asList(Keys.AGE_RANGE__AGE_RANGE_POP_CONFIG_ID_FKEY);
    }

    private transient PopConfig _popConfig;

    public PopConfig popConfig() {
        if (_popConfig == null)
            _popConfig = new PopConfig(this, Keys.AGE_RANGE__AGE_RANGE_POP_CONFIG_ID_FKEY);

        return _popConfig;
    }

    @Override
    public AgeRange as(String alias) {
        return new AgeRange(DSL.name(alias), this);
    }

    @Override
    public AgeRange as(Name alias) {
        return new AgeRange(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AgeRange rename(String name) {
        return new AgeRange(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AgeRange rename(Name name) {
        return new AgeRange(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, String, Short, Short> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
