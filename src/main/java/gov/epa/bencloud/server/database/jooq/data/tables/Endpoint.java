/*
 * This file is generated by jOOQ.
 */
package gov.epa.bencloud.server.database.jooq.data.tables;


import gov.epa.bencloud.server.database.jooq.data.Data;
import gov.epa.bencloud.server.database.jooq.data.Keys;
import gov.epa.bencloud.server.database.jooq.data.tables.records.EndpointRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Endpoint extends TableImpl<EndpointRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>data.endpoint</code>
     */
    public static final Endpoint ENDPOINT = new Endpoint();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EndpointRecord> getRecordType() {
        return EndpointRecord.class;
    }

    /**
     * The column <code>data.endpoint.id</code>.
     */
    public final TableField<EndpointRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>data.endpoint.endpoint_group_id</code>.
     */
    public final TableField<EndpointRecord, Short> ENDPOINT_GROUP_ID = createField(DSL.name("endpoint_group_id"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>data.endpoint.name</code>.
     */
    public final TableField<EndpointRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    private Endpoint(Name alias, Table<EndpointRecord> aliased) {
        this(alias, aliased, null);
    }

    private Endpoint(Name alias, Table<EndpointRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>data.endpoint</code> table reference
     */
    public Endpoint(String alias) {
        this(DSL.name(alias), ENDPOINT);
    }

    /**
     * Create an aliased <code>data.endpoint</code> table reference
     */
    public Endpoint(Name alias) {
        this(alias, ENDPOINT);
    }

    /**
     * Create a <code>data.endpoint</code> table reference
     */
    public Endpoint() {
        this(DSL.name("endpoint"), null);
    }

    public <O extends Record> Endpoint(Table<O> child, ForeignKey<O, EndpointRecord> key) {
        super(child, key, ENDPOINT);
    }

    @Override
    public Schema getSchema() {
        return Data.DATA;
    }

    @Override
    public Identity<EndpointRecord, Integer> getIdentity() {
        return (Identity<EndpointRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<EndpointRecord> getPrimaryKey() {
        return Keys.ENDPOINT_PKEY;
    }

    @Override
    public List<UniqueKey<EndpointRecord>> getKeys() {
        return Arrays.<UniqueKey<EndpointRecord>>asList(Keys.ENDPOINT_PKEY);
    }

    @Override
    public List<ForeignKey<EndpointRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<EndpointRecord, ?>>asList(Keys.ENDPOINT__ENDPOINT_ENDPOINT_GROUP_ID_FKEY);
    }

    private transient EndpointGroup _endpointGroup;

    public EndpointGroup endpointGroup() {
        if (_endpointGroup == null)
            _endpointGroup = new EndpointGroup(this, Keys.ENDPOINT__ENDPOINT_ENDPOINT_GROUP_ID_FKEY);

        return _endpointGroup;
    }

    @Override
    public Endpoint as(String alias) {
        return new Endpoint(DSL.name(alias), this);
    }

    @Override
    public Endpoint as(Name alias) {
        return new Endpoint(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Endpoint rename(String name) {
        return new Endpoint(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Endpoint rename(Name name) {
        return new Endpoint(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Short, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
