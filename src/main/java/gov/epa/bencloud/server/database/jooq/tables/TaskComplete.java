/*
 * This file is generated by jOOQ.
 */
package gov.epa.bencloud.server.database.jooq.tables;


import gov.epa.bencloud.server.database.jooq.Data;
import gov.epa.bencloud.server.database.jooq.Indexes;
import gov.epa.bencloud.server.database.jooq.Keys;
import gov.epa.bencloud.server.database.jooq.tables.records.TaskCompleteRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TaskComplete extends TableImpl<TaskCompleteRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>data.task_complete</code>
     */
    public static final TaskComplete TASK_COMPLETE = new TaskComplete();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TaskCompleteRecord> getRecordType() {
        return TaskCompleteRecord.class;
    }

    /**
     * The column <code>data.task_complete.task_id</code>.
     */
    public final TableField<TaskCompleteRecord, Long> TASK_ID = createField(DSL.name("task_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>data.task_complete.task_uuid</code>.
     */
    public final TableField<TaskCompleteRecord, String> TASK_UUID = createField(DSL.name("task_uuid"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>data.task_complete.task_user_identifier</code>.
     */
    public final TableField<TaskCompleteRecord, String> TASK_USER_IDENTIFIER = createField(DSL.name("task_user_identifier"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>data.task_complete.task_priority</code>.
     */
    public final TableField<TaskCompleteRecord, Integer> TASK_PRIORITY = createField(DSL.name("task_priority"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>data.task_complete.task_name</code>.
     */
    public final TableField<TaskCompleteRecord, String> TASK_NAME = createField(DSL.name("task_name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>data.task_complete.task_description</code>.
     */
    public final TableField<TaskCompleteRecord, String> TASK_DESCRIPTION = createField(DSL.name("task_description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>data.task_complete.task_type</code>.
     */
    public final TableField<TaskCompleteRecord, String> TASK_TYPE = createField(DSL.name("task_type"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>data.task_complete.task_parameters</code>.
     */
    public final TableField<TaskCompleteRecord, String> TASK_PARAMETERS = createField(DSL.name("task_parameters"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>data.task_complete.task_results</code>.
     */
    public final TableField<TaskCompleteRecord, String> TASK_RESULTS = createField(DSL.name("task_results"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>data.task_complete.task_successful</code>.
     */
    public final TableField<TaskCompleteRecord, Boolean> TASK_SUCCESSFUL = createField(DSL.name("task_successful"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>data.task_complete.task_complete_message</code>.
     */
    public final TableField<TaskCompleteRecord, String> TASK_COMPLETE_MESSAGE = createField(DSL.name("task_complete_message"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>data.task_complete.task_submitted_date</code>.
     */
    public final TableField<TaskCompleteRecord, LocalDateTime> TASK_SUBMITTED_DATE = createField(DSL.name("task_submitted_date"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>data.task_complete.task_started_date</code>.
     */
    public final TableField<TaskCompleteRecord, LocalDateTime> TASK_STARTED_DATE = createField(DSL.name("task_started_date"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>data.task_complete.task_completed_date</code>.
     */
    public final TableField<TaskCompleteRecord, LocalDateTime> TASK_COMPLETED_DATE = createField(DSL.name("task_completed_date"), SQLDataType.LOCALDATETIME(6), this, "");

    private TaskComplete(Name alias, Table<TaskCompleteRecord> aliased) {
        this(alias, aliased, null);
    }

    private TaskComplete(Name alias, Table<TaskCompleteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>data.task_complete</code> table reference
     */
    public TaskComplete(String alias) {
        this(DSL.name(alias), TASK_COMPLETE);
    }

    /**
     * Create an aliased <code>data.task_complete</code> table reference
     */
    public TaskComplete(Name alias) {
        this(alias, TASK_COMPLETE);
    }

    /**
     * Create a <code>data.task_complete</code> table reference
     */
    public TaskComplete() {
        this(DSL.name("task_complete"), null);
    }

    public <O extends Record> TaskComplete(Table<O> child, ForeignKey<O, TaskCompleteRecord> key) {
        super(child, key, TASK_COMPLETE);
    }

    @Override
    public Schema getSchema() {
        return Data.DATA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TASK_COMPLETE_ON_DATE, Indexes.TASK_COMPLETE_ON_UUID);
    }

    @Override
    public Identity<TaskCompleteRecord, Long> getIdentity() {
        return (Identity<TaskCompleteRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TaskCompleteRecord> getPrimaryKey() {
        return Keys.TASK_COMPLETE_PKEY;
    }

    @Override
    public List<UniqueKey<TaskCompleteRecord>> getKeys() {
        return Arrays.<UniqueKey<TaskCompleteRecord>>asList(Keys.TASK_COMPLETE_PKEY);
    }

    @Override
    public TaskComplete as(String alias) {
        return new TaskComplete(DSL.name(alias), this);
    }

    @Override
    public TaskComplete as(Name alias) {
        return new TaskComplete(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TaskComplete rename(String name) {
        return new TaskComplete(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TaskComplete rename(Name name) {
        return new TaskComplete(name, null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<Long, String, String, Integer, String, String, String, String, String, Boolean, String, LocalDateTime, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row14) super.fieldsRow();
    }
}
